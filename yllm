#!/bin/bash

# Define the API URL and Authorization token
# Set this in your shell startup script, for instance:
#export YLLM_API_URL="https://api.fireworks.ai/inference/v1/chat/completions"
#export YLLM_API_URL="http://localhost:8080/v1/chat/completions"
API_URL="$YLLM_API_URL"
AUTH_TOKEN="Bearer $YLLM_API_KEY"

# Default model
#MODEL="accounts/fireworks/models/mixtral-8x7b-instruct"
MODEL="accounts/fireworks/models/yi-34b-200k-capybara"
MAX_TOKENS=4096
TEMPERATURE=0.1
TOP_P=0.9

function print_help() {
  cat <<EOF
Usage: $0 [options] [--] [prompt]

Options:
  -h, --help                Print this help text and exit.
  -a, --api-url <url>       The API URL to use (default: $API_URL).
  -m, --model <model>       The model to use for the completion (default: $MODEL).
  -t, --temperature <t      The temperature for the model (default: $TEMPERATURE).
  -p, --top-p <p>           The top-p value for the model (default: $TOP_P).
  -l, --max-tokens <n>      The maximum number of tokens to generate (default: $MAX_TOKENS).
  -c, --stdin               Read data from standard input.
  -u, --url <url>           Read text data from the given URL.
  -f, --file <file>         Read text data from the given file.
  -d, --dump-prompt         Write the prompt to stdout and exit.

If no prompt is provided, read from standard input.
The prompt is built from input arguments in the order they are provided.
EOF
}

# no arguments, print help
if [[ $# -eq 0 ]]; then
  print_help
  exit 0
fi

# Parse command line arguments and flags
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            print_help
            exit 0
            ;;
        -a|--api-url)
            API_URL="$2"
            shift # past argument
            shift # past value
            ;;
        -m|--model)
            MODEL="$2"
            shift # past argument
            shift # past value
            ;;
        -t|--temperature)
            TEMPERATURE="$2"
            shift # past argument
            shift # past value
            ;;
        -p|--top-p)
            TOP_P="$2"
            shift # past argument
            shift # past value
            ;;
        -l|--max-tokens)
            MAX_TOKENS="$2"
            shift # past argument
            shift # past value
            ;;

        -c|--stdin)
            STDIN_CONTENT=$(cat)
            inputs+=("$STDIN_CONTENT")
            shift # past argument
            ;;
        -u|--url)
            URL_CONTENT="$(curl -s "$2" | lynx -stdin -dump)"
            inputs+=("$URL_CONTENT")
            shift # past argument
            shift # past value
            ;;
        -f|--file)
            FILE="$2"
            if [[ $(file -b --mime-type "$FILE") == text/* ]]; then
                FILE_CONTENT="$(cat "$FILE")"
            elif [[ $(file -b --mime-type "$FILE") == "application/pdf" ]]; then
                FILE_CONTENT="$(pdftotext "$FILE" -)"
            elif [[ $(file -b --mime-type "$FILE") == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ]] || [[ $(file -b --mime-type "$FILE") == "application/msword" ]]; then
                FILE_CONTENT="$(pandoc -s "$FILE" -t plain -o -)"
            else
                echo "Unsupported file type: $(file -b --mime-type "$FILE")"
                exit 1
            fi
            inputs+=("$FILE_CONTENT")
            shift # past argument
            shift # past value
            ;;
        -d|--dump-prompt)
            DUMP_PROMPT=true
            shift # past argument
            ;;
        *)
            inputs+=("$1")
            shift # past argument
            ;;
    esac
done

# if we should dump the prompt
if [[ $DUMP_PROMPT ]]; then
    printf "%s\n" "${inputs[@]}"
    exit 0
fi

unbuffer="stdbuf -o0 -i0"

send_request() {
    prompt="$1"
    json_payload=$(printf '{
        "messages": [
            {
                "role": "user",
                "content": %s
            }
        ],
        "model": "%s",
        "stream": true,
        "n": 1,
        "max_tokens": %d,
        "temperature": %.2f,
        "top_p": %.2f,
        "stop": []
    }' "$prompt" "$MODEL" $MAX_TOKENS $TEMPERATURE $TOP_P)

    $unbuffer curl --request POST \
         --silent \
         --url "$API_URL" \
         -H 'Content-Type: application/json' \
         -H "Authorization: $AUTH_TOKEN" \
         --data "$json_payload"
}

COMPLETE_PROMPT=$(printf "%s\n" "${inputs[@]}" | jq -sR .)

# Send the request and extract the response
send_request "$COMPLETE_PROMPT" \
    | $unbuffer sed 's%</s>"%"%' \
    | $unbuffer sed 's/^data: //g' | $unbuffer sed 's/\[DONE\]//' \
    | $unbuffer jq -j --unbuffered 'select(.choices[0].delta.content != null) | if .choices[0].finish_reason == "stop" then .choices[0].delta.content + "\n" else .choices[0].delta.content end'
